{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\OneDrive\\\\Desktop\\\\New folder (4)\\\\my-app\\\\src\\\\Components\\\\CreateArea.tsx\";\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport CreateArea from './CreateArea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntest('renders CreateArea component', () => {\n  render( /*#__PURE__*/_jsxDEV(CreateArea, {\n    title: \"\",\n    setTitle: () => {},\n    content: \"\",\n    setContent: () => {},\n    handleSubmit: () => {}\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this));\n});\ntest('fills title and content inputs and submits the form', () => {\n  const setTitleMock = jest.fn();\n  const setContentMock = jest.fn();\n  const handleSubmitMock = jest.fn();\n  const {\n    getByLabelText,\n    getByTestId\n  } = render( /*#__PURE__*/_jsxDEV(CreateArea, {\n    title: \"\",\n    setTitle: setTitleMock,\n    content: \"\",\n    setContent: setContentMock,\n    handleSubmit: handleSubmitMock\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this));\n  const titleInput = getByLabelText('Title:');\n  const contentInput = getByLabelText('Content:');\n  fireEvent.change(titleInput, {\n    target: {\n      value: 'Test Title'\n    }\n  });\n  fireEvent.change(contentInput, {\n    target: {\n      value: 'Test Content'\n    }\n  });\n\n  // Simulate form submission\n  fireEvent.submit(getByTestId('create-area-form'));\n  expect(setTitleMock).toHaveBeenCalledWith('Test Title');\n  expect(setContentMock).toHaveBeenCalledWith('Test Content');\n  expect(handleSubmitMock).toHaveBeenCalled();\n});","map":{"version":3,"names":["React","render","fireEvent","CreateArea","jsxDEV","_jsxDEV","test","title","setTitle","content","setContent","handleSubmit","fileName","_jsxFileName","lineNumber","columnNumber","setTitleMock","jest","fn","setContentMock","handleSubmitMock","getByLabelText","getByTestId","titleInput","contentInput","change","target","value","submit","expect","toHaveBeenCalledWith","toHaveBeenCalled"],"sources":["C:/Users/aksha/OneDrive/Desktop/New folder (4)/my-app/src/Components/CreateArea.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react';\r\nimport CreateArea from './CreateArea';\r\n\r\ntest('renders CreateArea component', () => {\r\n  render(\r\n    <CreateArea\r\n      title=\"\"\r\n      setTitle={() => {}}\r\n      content=\"\"\r\n      setContent={() => {}}\r\n      handleSubmit={() => {}}\r\n    />\r\n  );\r\n});\r\n\r\ntest('fills title and content inputs and submits the form', () => {\r\n  const setTitleMock = jest.fn();\r\n  const setContentMock = jest.fn();\r\n  const handleSubmitMock = jest.fn();\r\n\r\n  const { getByLabelText, getByTestId } = render(\r\n    <CreateArea\r\n      title=\"\"\r\n      setTitle={setTitleMock}\r\n      content=\"\"\r\n      setContent={setContentMock}\r\n      handleSubmit={handleSubmitMock}\r\n    />\r\n  );\r\n  const titleInput = getByLabelText('Title:') as HTMLInputElement;\r\n  const contentInput = getByLabelText('Content:') as HTMLInputElement;\r\n  fireEvent.change(titleInput, { target: { value: 'Test Title' } });\r\n  fireEvent.change(contentInput, { target: { value: 'Test Content' } });\r\n\r\n  // Simulate form submission\r\n  fireEvent.submit(getByTestId('create-area-form'));\r\n\r\n  expect(setTitleMock).toHaveBeenCalledWith('Test Title');\r\n  expect(setContentMock).toHaveBeenCalledWith('Test Content');\r\n  expect(handleSubmitMock).toHaveBeenCalled();\r\n});\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,SAAS,QAAQ,wBAAwB;AAC1D,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtCC,IAAI,CAAC,8BAA8B,EAAE,MAAM;EACzCL,MAAM,eACJI,OAAA,CAACF,UAAU;IACTI,KAAK,EAAC,EAAE;IACRC,QAAQ,EAAEA,CAAA,KAAM,CAAC,CAAE;IACnBC,OAAO,EAAC,EAAE;IACVC,UAAU,EAAEA,CAAA,KAAM,CAAC,CAAE;IACrBC,YAAY,EAAEA,CAAA,KAAM,CAAC;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CACH,CAAC;AACH,CAAC,CAAC;AAEFT,IAAI,CAAC,qDAAqD,EAAE,MAAM;EAChE,MAAMU,YAAY,GAAGC,IAAI,CAACC,EAAE,CAAC,CAAC;EAC9B,MAAMC,cAAc,GAAGF,IAAI,CAACC,EAAE,CAAC,CAAC;EAChC,MAAME,gBAAgB,GAAGH,IAAI,CAACC,EAAE,CAAC,CAAC;EAElC,MAAM;IAAEG,cAAc;IAAEC;EAAY,CAAC,GAAGrB,MAAM,eAC5CI,OAAA,CAACF,UAAU;IACTI,KAAK,EAAC,EAAE;IACRC,QAAQ,EAAEQ,YAAa;IACvBP,OAAO,EAAC,EAAE;IACVC,UAAU,EAAES,cAAe;IAC3BR,YAAY,EAAES;EAAiB;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CACH,CAAC;EACD,MAAMQ,UAAU,GAAGF,cAAc,CAAC,QAAQ,CAAqB;EAC/D,MAAMG,YAAY,GAAGH,cAAc,CAAC,UAAU,CAAqB;EACnEnB,SAAS,CAACuB,MAAM,CAACF,UAAU,EAAE;IAAEG,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAa;EAAE,CAAC,CAAC;EACjEzB,SAAS,CAACuB,MAAM,CAACD,YAAY,EAAE;IAAEE,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAe;EAAE,CAAC,CAAC;;EAErE;EACAzB,SAAS,CAAC0B,MAAM,CAACN,WAAW,CAAC,kBAAkB,CAAC,CAAC;EAEjDO,MAAM,CAACb,YAAY,CAAC,CAACc,oBAAoB,CAAC,YAAY,CAAC;EACvDD,MAAM,CAACV,cAAc,CAAC,CAACW,oBAAoB,CAAC,cAAc,CAAC;EAC3DD,MAAM,CAACT,gBAAgB,CAAC,CAACW,gBAAgB,CAAC,CAAC;AAC7C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}